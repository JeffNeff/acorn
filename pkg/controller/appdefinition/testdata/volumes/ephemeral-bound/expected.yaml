kind: Namespace
apiVersion: v1
metadata:
  name: app-created-namespace
  labels:
    "acorn.io/app-namespace": "app-namespace"
    "acorn.io/app-name": "app-name"
    "acorn.io/managed": "true"
    pod-security.kubernetes.io/enforce: baseline

---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: container-name
  namespace: app-created-namespace
  labels:
    "acorn.io/app-namespace": "app-namespace"
    "acorn.io/app-name": "app-name"
    "acorn.io/container-name": "container-name"
    "acorn.io/managed": "true"
spec:
  selector:
    matchLabels:
      "acorn.io/app-namespace": "app-namespace"
      "acorn.io/app-name": "app-name"
      "acorn.io/container-name": "container-name"
      "acorn.io/managed": "true"
  template:
    metadata:
      labels:
        "acorn.io/app-namespace": "app-namespace"
        "acorn.io/app-name": "app-name"
        "acorn.io/container-name": "container-name"
        "acorn.io/managed": "true"
      annotations:
        acorn.io/container-spec: '{"dirs":{"/var/tmp":{"secret":{},"volume":"foo"}},"image":"image-name"}'
    spec:
      enableServiceLinks: false
      shareProcessNamespace: true
      automountServiceAccountToken: false
      volumes:
        - name: foo
          persistentVolumeClaim:
            claimName: foo-bind
      containers:
        - name: container-name
          image: "index.docker.io/library/test@image-name"
          volumeMounts:
            - mountPath: "/var/tmp"
              name: foo
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: "foo-bind"
  namespace: app-created-namespace
  labels:
    "acorn.io/app-namespace": "app-namespace"
    "acorn.io/app-name": "app-name"
    "acorn.io/managed": "true"
spec:
  volumeName: "existing-foo"
  resources:
    requests:
      storage: 10_000_000_000
---
kind: AppInstance
apiVersion: acorn.io/v1
metadata:
  name: app-name
  namespace: app-namespace
spec:
  image: test
  volumes:
    - volumeRequest: foo
      volume: existing-foo

status:
  namespace: app-created-namespace
  appSpec:
    containers:
      container-name:
        image: "image-name"
        dirs:
          "/var/tmp":
            volume: foo
    volumes:
      foo:
        class: ephemeral
        size: 10
  conditions:
    defined:
      success: true
